
How to read the diagram
| Layer                 | Whatâ€™s shown                                                                                                                                                                                                                                                                                                     |
| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Browser**           | Four HTML pages rendered by Jinja templates. Each read page has simpleâ€¯`<table>` markup (plain CSS) plus **Addâ€¯/â€¯Updateâ€¯/â€¯ðŸ—‘â€¯Softâ€‘Delete** buttons that navigate to their respective form pages. The **Options** page includes a tiny JS snippet that opens a WebSocket to stream realâ€‘time prices.              |
| **FastAPI routes**    | â€¢ **GET** routes render pages with `TemplateResponse`.<br>â€¢ **POST** routes handle inserts/updates & set `is_active = FALSE` for softâ€‘delete.<br>â€¢ **/login** issues a session cookie after validating credentials inâ€¯`users`.<br>â€¢ **/ws/options** is an async WebSocket coroutine that emits JSON price ticks. |
| **PostgreSQL schema** | Simple tables with:<br>â€¢ primary keys (`ticker`, `option_ticker`),<br>â€¢ foreign keys tying `options` + `risk_profile_call` back to `stocks`,<br>â€¢ `is_active` boolean for softâ€‘delete.                                                                                                                           |


Stack recommendations (FastAPI serverâ€‘rendered)
| Concern                    | Suggested libs / notes                                                                                                             |
| -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |
| **Templates**              | `Jinja2Templates` (builtâ€‘in via Starlette)                                                                                         |
| **Auth & sessions**        | `itsdangerous`â€‘signed cookie + `fastapiâ€‘login` *or* `fastapiâ€‘users`; store `passlib`â€‘hashed passwords in `users`.                  |
| **ORM & migrations**       | `SQLAlchemyâ€¯2.x` **async** + `asyncpg`; migrations via **Alembic** (`alembic revision --autogenerate`).                            |
| **Soft delete helper**     | Add `is_active` field; default queries filter `is_active == TRUE`.                                                                 |
| **WebSocket price feed**   | `@app.websocket("/ws/options")`; broadcast via `starlette.websockets.WebSocket` or `fastapiâ€‘websocketâ€‘pubsub` if multiâ€‘client.     |
| **Unit tests**             | `pytestâ€‘asyncio` for async routes, `httpx.AsyncClient` for test client.                                                            |
| **Deployment on Pi / Mac** | `uvicorn main:app --host 0.0.0.0 --port 8000 --workers 2` (ASGI). Put Cloudflare Tunnel / Twingate in front when you move offâ€‘LAN. |


